---
title: "In-class Exercise 1"
author: "Chia Yong Soon"
date: "18 November 2023"
format: html
editor: visual
---

## 1 Getting Started

In this hands-on exercise, two R packages will be used. They are:

sf for importing, managing, and processing geospatial data, and tidyverse for performing data science tasks such as importing, wrangling and visualising data. Tidyverse consists of a family of R packages. In this hands-on exercise, the following packages will be used:

readr for importing csv data, readxl for importing Excel worksheet, tidyr for manipulating data, dplyr for transforming data, and ggplot2 for visualising data

Type the following code chunk.

```{r}
pacman::p_load(tmap, sf, tidyverse, knitr)
```

What we can learn from the code chunk above:

p_load function pf pacman package is used to install and load sf and tidyverse pacages into R environment.

## 1.1 Importing Geospatial Data

In this section, you will learn how to import the following geospatial data into R by using st_read() of sf package:

MPSZ-2019, a polygon feature layer in ESRI shapefile format, BusStop, a line feature layer in ESRI shapefile format.

#### 1.1.1 Importing polygon feature data in shapefile format

The code chunk below uses st_read() function of sf package to import MPSZ-2019 shapefile into R as a polygon feature data frame. Note that when the input geospatial data is in shapefile format, two arguments will be used, namely: dsn to define the data path and layer to provide the shapefile name. Also note that no extension such as .shp, .dbf, .prj and .shx are needed.

```{r}
mpsz = st_read(dsn = "data/geospatial", 
                  layer = "MPSZ-2019")
```

#### 1.1.2 Importing polyline feature data in shapefile form

The code chunk below uses st_read() function of sf package to import BusStop shapefile into R as line feature data frame.

```{r}
BusStop = st_read(dsn = "data/geospatial", 
                         layer = "BusStop")
```

The message above reveals that there are a total of 5161 features and 3 fields in BusStop linestring feature data frame and it is in svy21 projected coordinates system too.

### 1.2 Importing and Converting An Aspatial Data

In practice, it is not unusual that we will come across data such as listing of Inside Airbnb. We call this kind of data aspatial data. This is because it is not a geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points.

In this section, you will learn how to import an aspatial data into R environment and save it as a tibble data frame. Next, you will convert it into a simple feature data frame.

For the purpose of this exercise, the listings.csv data downloaded from AirBnb will be used.

#### 1.2.1 Importing the aspatial data

Since listings data set is in csv file format, we will use read_csv() of readr package to import listing.csv as shown the code chunk below. The output R object is called listings and it is a tibble data frame.

```{r}
odbus0823 <- read_csv("data/aspatial/origin_destination_bus_202308.csv")
```

After importing the data file into R, it is important for us to examine if the data file has been imported correctly.

The code chunk below shows list() of Base R instead of glimpse() is used to do the job.

```{r}
list(odbus0823) 
```

```{r}
glimpse(odbus0823) 
```

```{r}
odbus0923 <- read_csv("data/aspatial/origin_destination_bus_202309.csv")
```

```{r}
list(odbus0923) 
```

```{r}
glimpse(odbus0923) 
```

```{r}
odbus1023 <- read_csv("data/aspatial/origin_destination_bus_202310.csv")
```

```{r}
list(odbus1023) 
```

```{r}
glimpse(odbus1023) 
```

From the above, we see that ORIGIN_PT_CODE and DESTINATION_PT_CODE are character data type. We should convert these two columns from characters into factors because these two columns contains the bus stop numbers and we will need these bus stop numbers to get the bus stop locations in subsequent steps. We will use as.factor() to convert the data from character to factor.

```{r}
odbus0823$ORIGIN_PT_CODE <- as.factor(odbus0823$ORIGIN_PT_CODE)
odbus0823$DESTINATION_PT_CODE <- as.factor(odbus0823$DESTINATION_PT_CODE)
```

### 2.1 Extracting the Study Data

We will extract the study data using filter(), group_by() and summarise() to get our study data (i.e., weekday trips that start from 7am and end before 10am).

```{r}
origintrip_7_9 <- odbus0823 %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 7 & TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

It should look similar to the data table below.

```{r}
kable(head(origintrip_7_9))
```

We will save the output in rds format for future used.

```{r}
write_rds(origintrip_7_9, "data/rds/origintrip_7_9.rds")
```

The code chunk below will be used to import the save origintrip_7_9.rds into R environment.

```{r}
origintrip_7_9 <- read_rds("data/rds/origintrip_7_9.rds")
```

## 2 Working with Geospatial Data

### 2.1 Use of st_read()

We will use st_read() from sf package to read the geospatial data and use st_transform() from sf package to project the data into svy21 using its ESPG code 3414.

```{r}
busstop <- st_read(dsn = "data/geospatial", layer = "BusStop") %>%
  st_transform(crs = 3414)
```

Let us take a look at the imported data:

```{r}
busstop
```

```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
```

Let us take a look at the imported data:

```{r}
mpsz
```

## 3 Geospatial data wrangling

### 3.1 Combining Busstop and mpsz

Code chunk below populates the planning subzone code (i.e. SUBZONE_C) of mpsz sf data frame into busstop sf data frame.

```{r}
busstop_mpsz <- st_intersection(busstop, mpsz) %>%
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry()
```

Before moving to the next step, it is wise to save the output into rds format.

```{r}
write_rds(busstop_mpsz, "data/rds/busstop_mpsz.csv")  
```

```{r}
origin_data <- left_join(origintrip_7_9 , busstop_mpsz,
            by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C)
```

Before continue, it is a good practice for us to check for duplicating records.

```{r}
duplicate <- origin_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

If duplicated records are found, the code chunk below will be used to retain the unique records.

```{r}
origin_data <- unique(origin_data)
```

It will be a good practice to confirm if the duplicating records issue has been addressed fully.

Next, write a code chunk to update od_data data frame with the planning subzone codes.

```{r}
mpsz_origtrip <- left_join(mpsz, 
                           origin_data,
                           by = c("SUBZONE_C" = "ORIGIN_SZ"))
```

## 4 Choropleth Visualisation

Using the steps you had learned, prepare a choropleth map showing the distribution of passenger trips at planning sub-zone level.

```{r}
tm_shape(mpsz_origtrip)+
  tm_fill("TRIPS", 
          style = "quantile", 
          palette = "Blues",
          title = "Passenger trips") +
  tm_layout(main.title = "Passenger trips generated at planning sub-zone level",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```
