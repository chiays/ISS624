---
title: "In-class_Ex5"
author: "Chia Yong Soon"
date: "16 Dec 2023"
date-modified: "last-modified"
---

```{r}
devtools::install_github("LukeCe/spflow")
```

```{r}
pacman::p_load(tmap,sf,spdep,sp,Matrix,spflow,reshape2,knitr,tidyverse)
```

## Data Preparation

Before we can calibrate Spatial Econometric Interaction MOdels by using spflow package, threee data sets are required.
They ar:

- a spatial weights

```{r}
mpsz <- st_read(dsn = "data/geospatial/",
                layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
```

```{r}
#| code-fold: true 
#| code-summary: "Show the code" 
BusStop = st_read(dsn = "data/geospatial",                           
  layer = "BusStop") %>%   
st_transform(crs = 3414)
```

```{r}
mpsz$`BUSSTOP_COUNT`<- lengths(
  st_intersects(
    mpsz, BusStop))
```

```{r}
write_rds(mpsz,
          "data/rds/mpsz_busstop.rds")
```

```{r}
mpsz_busstop <- read_rds("data/rds/mpsz_busstop.rds")
```

```{r}
centroids <- suppressWarnings({
  st_point_on_surface(st_geometry(mpsz_busstop))}
)
```

```{r}
mpsz_nb <- list(
  "by_continguity" = poly2nb(mpsz_busstop),
  "by_distance"= dnearneigh(centroids, 
                            d1 = 0, d2 = 5000),
  "by_knn" = knn2nb(knearneigh(centroids, 3))
)
```

```{r}
plot(st_geometry(mpsz))
plot(mpsz_nb$by_continguity,
     centroids,
     add = T,
     col = rgb(0,0,0,
               alpha=0.5))
title("Contiguity")

plot(st_geometry(mpsz))
plot(mpsz_nb$by_distance,
     centroids,
     add = T,
     col = rgb(0,0,0,
               alpha= 0.5))
title("Distance")
```


```{r}
odbus6_9 <- read_rds("data/rds/odbus6_9.rds")
```

```{r}
#| code-fold: true 
#| code-summary: "Show the code" 
busstop_mpsz <- st_intersection(BusStop,mpsz) %>%   
select(BUS_STOP_N, SUBZONE_C) %>%   st_drop_geometry()
```


```{r}
#| code-fold: true 
#| code-summary: "Show the code" 
od_data <- left_join(odbus6_9 , busstop_mpsz,
            by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C) %>%
  group_by(ORIGIN_SZ) %>%
  summarise(TOT_TRIPS = sum(TRIPS))
```

```{r}
#| code-fold: true 
#| code-summary: "Show the code" 
dest_SZ <- left_join(odbus6_9 , busstop_mpsz,
            by = c("DESTINATION_PT_CODE" = "BUS_STOP_N")) %>%
  rename(DEST_BS = DESTINATION_PT_CODE,
         DEST_SZ = SUBZONE_C) %>%
  group_by(DEST_SZ) %>%
  summarise(TOT_TRIPS = sum(TRIPS))
```
```{r}
#| code-fold: true 
#| code-summary: "Show the code" 
od_data <- od_data %>%
  cbind(dest_SZ)
```

```{r}
#| code-fold: true 
#| code-summary: "Show the code" 
od_data <- od_data %>%
select(1:3)
```

```{r}
#| code-fold: true 
#| code-summary: "Show the code" 

mpsz_nb <- read_rds("data/rds/mpsz_nb.rds")
mpsz_flow <- read_rds("data/rds/mpsz_flow.rds")
mpsz_var <- read_rds("data/rds/mpsz_var.rds")
```


## Creating 'spflow_netflow_network-class' objects

'spflow_netflow_network-class' is an S4 class that contains all information on a spatial network which is composed by a set of nodes that are linked by some neightbourhood relation.

It can be created by using ['spflow_network()'].


```{r}
mpsz_net <- spflow_network(
  id_net = "sg",
  node_neighborhood = 
nb2mat(mpsz_nb$by_contiguity),
  node_data = mpsz_var,
  node_key_column = "SZ_CODE")

mpsz_net
```


```{r}
mpsz_net_pairs <- spflow_network_pair(
  id_orig_net = "sg",
  id_dest_net = "sg",
  pair_data = mpsz_flow,
  orig_key_column = "ORIGIN_SZ",
  dest_key_column = "DESTIN_SZ")

mpsz_net_pairs
```

```{r}
mpsz_multi_net <- spflow_network_multi(mpsz_net,
                                      mpsz_net_pairs)

mpsz_multi_net
```




